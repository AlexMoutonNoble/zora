{"version":3,"file":"zora.js","sources":["../src/protocol.js","../src/test.js","../src/assertion.js","../src/tap-reporter.js","../src/index.js","../src/sample.js"],"sourcesContent":["export const startTestMessage = (test, offset) => ({\n    type: \"TEST_START\" /* TEST_START */,\n    data: test,\n    offset\n});\nexport const assertionMessage = (assertion, offset) => ({\n    type: \"ASSERTION\" /* ASSERTION */,\n    data: assertion,\n    offset\n});\nexport const endTestMessage = (test, offset) => ({\n    type: \"TEST_END\" /* TEST_END */,\n    data: test,\n    offset\n});\nexport const comment = (comment, offset) => ({\n    type: \"COMMENT\" /* COMMENT */,\n    data: comment,\n    offset\n});\n","import { assert } from './assertion';\nimport { assertionMessage, endTestMessage, startTestMessage } from './protocol';\nexport const defaultTestOptions = Object.freeze({\n    offset: 0,\n    skip: false\n});\n// todo directive (todo & skip)\nexport const tester = (description, spec, { offset = 0, skip = false } = defaultTestOptions) => {\n    let id = 0;\n    let pass = true;\n    let executionTime = 0;\n    const assertions = [];\n    const collect = item => assertions.push(item);\n    const testRoutine = (async function () {\n        try {\n            const start = Date.now();\n            const result = await spec(assert(collect, offset));\n            executionTime = Date.now() - start;\n            return result;\n        }\n        catch (e) {\n            // todo bailout\n            console.log(e);\n        }\n    })();\n    return Object.defineProperties({\n        [Symbol.asyncIterator]: async function* () {\n            await testRoutine;\n            for (const assertion of assertions) {\n                assertion.id = ++id;\n                if (assertion[Symbol.asyncIterator]) {\n                    // Sub test\n                    yield startTestMessage({ description: assertion.description }, offset);\n                    yield* assertion;\n                }\n                yield assertionMessage(assertion, offset);\n                pass = pass && assertion.pass;\n            }\n            yield endTestMessage(this, offset);\n        }\n    }, {\n        routine: {\n            value: testRoutine\n        },\n        description: {\n            value: description\n        },\n        pass: {\n            get() {\n                return pass;\n            }\n        },\n        executionTime: {\n            get() {\n                return executionTime;\n            }\n        },\n        length: {\n            get() {\n                return id;\n            }\n        }\n    });\n};\n","import { defaultTestOptions, tester } from './test';\nexport const isAssertionResult = (result) => {\n    return 'operator' in result;\n};\nconst getAssertionLocation = () => {\n    const err = new Error();\n    const stack = (err.stack || '').split('\\n');\n    return (stack[3] || '').trim().replace(/^at/i, '');\n};\nconst assertMethodHook = (fn) => function (actual, ...rest) {\n    const assertResult = fn(actual, ...rest);\n    if (assertResult.pass === false) {\n        assertResult.at = getAssertionLocation();\n    }\n    this.collect(assertResult);\n    return assertResult;\n};\nconst aliasMethodHook = (methodName) => function (...args) {\n    return this[methodName](...args);\n};\nexport const AssertPrototype = {\n    equal: assertMethodHook((actual, expected, description = 'should be equivalent') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"equal\" /* EQUAL */\n    })),\n    equals: aliasMethodHook('equal'),\n    eq: aliasMethodHook('equal'),\n    deepEqual: aliasMethodHook('equal'),\n    notEqual: assertMethodHook((actual, expected, description = 'should not be equivalent') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"notEqual\" /* NOT_EQUAL */\n    })),\n    notEquals: aliasMethodHook('notEqual'),\n    notEq: aliasMethodHook('notEqual'),\n    notDeepEqual: aliasMethodHook('notEqual'),\n    is: assertMethodHook((actual, expected, description = 'should be the same value') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"is\" /* IS */\n    })),\n    same: aliasMethodHook('is'),\n    isNot: assertMethodHook((actual, expected, description = 'should not be the same value') => ({\n        pass: !Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"isNot\" /* IS_NOT */\n    })),\n    notSame: aliasMethodHook('isNot'),\n    ok: assertMethodHook((actual, description = 'should be the truthy') => ({\n        pass: Boolean(actual),\n        actual,\n        expected: true,\n        description,\n        operator: \"ok\" /* OK */\n    })),\n    truthy: aliasMethodHook('ok'),\n    notOk: assertMethodHook((actual, description = 'should be the falsy') => ({\n        pass: !Boolean(actual),\n        actual,\n        expected: true,\n        description,\n        operator: \"notOk\" /* NOT_OK */\n    })),\n    falsy: aliasMethodHook('notOk'),\n    fail: assertMethodHook((description = 'fail called') => ({\n        pass: false,\n        actual: 'fail called',\n        expected: 'fail not called',\n        description,\n        operator: \"fail\" /* FAIL */\n    })),\n    throws: assertMethodHook((func, expected, description) => {\n        let caught;\n        let pass;\n        let actual;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        pass = caught !== undefined;\n        actual = caught && caught.error;\n        if (expected instanceof RegExp) {\n            pass = expected.test(actual) || expected.test(actual && actual.message);\n            actual = actual && actual.message || actual;\n            expected = String(expected);\n        }\n        else if (typeof expected === 'function' && caught) {\n            pass = actual instanceof expected;\n            actual = actual.constructor;\n        }\n        return {\n            pass,\n            actual,\n            expected,\n            description: description || 'should throw',\n            operator: \"throws\" /* THROWS */,\n        };\n    }),\n    doesNotThrow: assertMethodHook((func, expected, description) => {\n        let caught;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        return {\n            pass: caught === undefined,\n            expected: 'no thrown error',\n            actual: caught && caught.error,\n            operator: \"doesNotThrow\" /* DOES_NOT_THROW */,\n            description: description || 'should not throw'\n        };\n    })\n};\nexport const assert = (collect, offset) => {\n    return Object.assign(Object.create(AssertPrototype, { collect: { value: collect } }), {\n        test(description, spec, opts = defaultTestOptions) {\n            const subTest = tester(description, spec, Object.assign({}, defaultTestOptions, opts, { offset: offset + 1 }));\n            collect(subTest);\n            return subTest.routine;\n        }\n    });\n};\n","import { isAssertionResult } from './assertion';\nconst print = (message, offset = 0) => {\n    console.log(message.padStart(message.length + (offset * 4))); // 4 white space used as indent (see tap-parser)\n};\nconst printYAML = (obj, offset = 0) => {\n    const YAMLOffset = offset + 0.5;\n    print('---', YAMLOffset);\n    for (const [prop, value] of Object.entries(obj)) {\n        print(`${prop}: ${JSON.stringify(value)}`, YAMLOffset);\n    }\n    print('...', YAMLOffset);\n};\nconst printComment = (message) => {\n    print(`# ${message.data}`, message.offset);\n};\nconst printSubTest = (message) => {\n    const { data } = message;\n    print(`# Subtest: ${data.description}`, message.offset);\n};\nconst printAssert = (message) => {\n    const { data, offset } = message;\n    const { pass, description, id } = data;\n    const label = pass === true ? 'ok' : 'not ok';\n    if (isAssertionResult(data)) {\n        print(`${label} ${id} - ${description}`, offset);\n        if (pass === false) {\n            const { expected, actual, at, operator } = data;\n            printYAML({ expected, found: actual, wanted: expected, actual, at, operator }, offset);\n        }\n    }\n    else {\n        print(`${pass ? 'ok' : 'not ok'} ${id} - ${description} # ${data.executionTime}ms`, message.offset);\n    }\n};\nconst printTest = (message) => {\n    const { length } = message.data;\n    print(`1..${length}`, message.offset);\n};\n// const printPlan = (message: PlanSummaryMessage): void => {\n//     const {data, offset} = message;\n//     print(`1..${data}`, offset);\n// };\nexport const tap = (message) => {\n    switch (message.type) {\n        case \"TEST_START\" /* TEST_START */:\n            printSubTest(message);\n            break;\n        case \"ASSERTION\" /* ASSERTION */:\n            printAssert(message);\n            break;\n        case \"TEST_END\" /* TEST_END */:\n            printTest(message);\n            break;\n        case \"COMMENT\" /* COMMENT */:\n            printComment(message);\n            break;\n    }\n};\nexport const reporter = async (stream) => {\n    print('TAP version 13');\n    for await (const message of stream) {\n        tap(message);\n    }\n    // print(`1..2`);\n    // summary\n};\n","import { reporter as tap } from './tap-reporter';\nimport { assert } from './assertion';\nimport { assertionMessage, endTestMessage, startTestMessage } from './protocol';\nexport * from './assertion';\nlet autoStart = true;\nasync function* flatten(iterable) {\n    for (const iter of iterable) {\n        yield* iter;\n    }\n}\nconst harnessFactory = (reporter = tap) => {\n    const tests = [];\n    let pass = true;\n    let id = 0;\n    const collect = item => tests.push(item);\n    const api = assert(collect, 0);\n    const instance = Object.create(api, {\n        length: {\n            get() {\n                return tests.length;\n            }\n        }\n    });\n    return Object.assign(instance, {\n        [Symbol.asyncIterator]: async function* () {\n            for (const t of tests) {\n                t.id = ++id;\n                yield startTestMessage(t, 0);\n                yield* t;\n                yield assertionMessage(t, 0);\n                pass = pass && t.pass;\n            }\n            yield endTestMessage(this, 0);\n        },\n        run: async () => {\n            return reporter(instance);\n        }\n    });\n};\nconst defaultTestHarness = harnessFactory();\nexport const test = defaultTestHarness.test;\nexport const createHarness = (reporter = tap) => {\n    autoStart = false;\n    return harnessFactory(reporter);\n};\nconst start = () => {\n    if (autoStart) {\n        defaultTestHarness.run();\n    }\n};\n// on next tick start reporting\n// @ts-ignore\nif (typeof window === 'undefined') {\n    setTimeout(start, 0);\n}\nelse {\n    // @ts-ignore\n    window.addEventListener('load', start);\n}\n","import { test } from './index';\nconst wait = (time = 500) => new Promise(resolve => {\n    setTimeout(() => resolve(), time);\n});\ntest('a simple tester', async (t) => {\n    // console.time('a simple tester');\n    t.is(3, 2, 'should fail');\n    await wait(700);\n    await t.test('inside', async (t) => {\n        // console.time('inside');\n        await wait(800);\n        t.is('insider', 'insider', 'from insider');\n        // console.timeEnd('inside');\n    });\n    t.test('inside not waiting', async (t) => {\n        // console.time('inside not waiting');\n        t.test('deep inside not waiting', async (t) => {\n            // console.time('deep inside not waiting');\n            await wait(400);\n            t.is('bar', 'bart', 'bar');\n            // console.timeEnd('deep inside not waiting');\n        });\n        await t.test('deep inside', async (t) => {\n            // console.time('deep inside');\n            await wait(200);\n            t.is('foo', 'foo', 'deep inside assert');\n            // console.timeEnd('deep inside');\n        });\n        // console.timeEnd('inside not waiting');\n    });\n    t.is(4, 4, 'four should be four bis');\n    // console.timeEnd('a simple tester');\n});\ntest('another one', async (t) => {\n    // console.time('another one');\n    await wait(1000);\n    t.ok('foo', 'foo is truthy');\n    // console.timeEnd('another one');\n});\n"],"names":["reporter","tap"],"mappings":"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"}