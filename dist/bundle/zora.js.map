{"version":3,"file":"zora.js","sources":["../src/assertion.js","../src/protocol.js","../src/test.js","../src/tap-reporter.js","../../node_modules/@lorenzofox3/for-await/dist/bundle/module.js","../src/index.js","../src/sample.js"],"sourcesContent":["import { defaultTestOptions, tester } from './test';\nexport const isAssertionResult = (result) => {\n    return 'operator' in result;\n};\nconst getAssertionLocation = () => {\n    const err = new Error();\n    const stack = (err.stack || '').split('\\n');\n    return (stack[3] || '').trim().replace(/^at/i, '');\n};\nconst assertMethodHook = (fn) => function (actual, ...rest) {\n    const assertResult = fn(actual, ...rest);\n    if (assertResult.pass === false) {\n        assertResult.at = getAssertionLocation();\n    }\n    this.collect(assertResult);\n    return assertResult;\n};\nconst aliasMethodHook = (methodName) => function (...args) {\n    return this[methodName](...args);\n};\nexport const AssertPrototype = {\n    equal: assertMethodHook((actual, expected, description = 'should be equivalent') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"equal\" /* EQUAL */\n    })),\n    equals: aliasMethodHook('equal'),\n    eq: aliasMethodHook('equal'),\n    deepEqual: aliasMethodHook('equal'),\n    notEqual: assertMethodHook((actual, expected, description = 'should not be equivalent') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"notEqual\" /* NOT_EQUAL */\n    })),\n    notEquals: aliasMethodHook('notEqual'),\n    notEq: aliasMethodHook('notEqual'),\n    notDeepEqual: aliasMethodHook('notEqual'),\n    is: assertMethodHook((actual, expected, description = 'should be the same value') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"is\" /* IS */\n    })),\n    same: aliasMethodHook('is'),\n    isNot: assertMethodHook((actual, expected, description = 'should not be the same value') => ({\n        pass: !Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"isNot\" /* IS_NOT */\n    })),\n    notSame: aliasMethodHook('isNot'),\n    ok: assertMethodHook((actual, description = 'should be the truthy') => ({\n        pass: Boolean(actual),\n        actual,\n        expected: true,\n        description,\n        operator: \"ok\" /* OK */\n    })),\n    truthy: aliasMethodHook('ok'),\n    notOk: assertMethodHook((actual, description = 'should be the falsy') => ({\n        pass: !Boolean(actual),\n        actual,\n        expected: true,\n        description,\n        operator: \"notOk\" /* NOT_OK */\n    })),\n    falsy: aliasMethodHook('notOk'),\n    fail: assertMethodHook((description = 'fail called') => ({\n        pass: false,\n        actual: 'fail called',\n        expected: 'fail not called',\n        description,\n        operator: \"fail\" /* FAIL */\n    })),\n    throws: assertMethodHook((func, expected, description) => {\n        let caught;\n        let pass;\n        let actual;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        pass = caught !== undefined;\n        actual = caught && caught.error;\n        if (expected instanceof RegExp) {\n            pass = expected.test(actual) || expected.test(actual && actual.message);\n            actual = actual && actual.message || actual;\n            expected = String(expected);\n        }\n        else if (typeof expected === 'function' && caught) {\n            pass = actual instanceof expected;\n            actual = actual.constructor;\n        }\n        return {\n            pass,\n            actual,\n            expected,\n            description: description || 'should throw',\n            operator: \"throws\" /* THROWS */,\n        };\n    }),\n    doesNotThrow: assertMethodHook((func, expected, description) => {\n        let caught;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        return {\n            pass: caught === undefined,\n            expected: 'no thrown error',\n            actual: caught && caught.error,\n            operator: \"doesNotThrow\" /* DOES_NOT_THROW */,\n            description: description || 'should not throw'\n        };\n    })\n};\nexport const assert = (collect, offset) => {\n    return Object.assign(Object.create(AssertPrototype, { collect: { value: collect } }), {\n        test(description, spec, opts = defaultTestOptions) {\n            const subTest = tester(description, spec, Object.assign({}, defaultTestOptions, opts, { offset: offset + 1 }));\n            collect(subTest);\n            return subTest.routine;\n        }\n    });\n};\n","export const startTestMessage = (test, offset) => ({\n    type: \"TEST_START\" /* TEST_START */,\n    data: test,\n    offset\n});\nexport const assertionMessage = (assertion, offset) => ({\n    type: \"ASSERTION\" /* ASSERTION */,\n    data: assertion,\n    offset\n});\nexport const endTestMessage = (test, offset) => ({\n    type: \"TEST_END\" /* TEST_END */,\n    data: test,\n    offset\n});\nexport const comment = (comment, offset) => ({\n    type: \"COMMENT\" /* COMMENT */,\n    data: comment,\n    offset\n});\n","import { assert } from './assertion';\nimport { assertionMessage, endTestMessage, startTestMessage } from './protocol';\nexport const defaultTestOptions = Object.freeze({\n    offset: 0,\n    skip: false\n});\n// todo directive (todo & skip)\n// todo plan\nexport const tester = (description, spec, { offset = 0, skip = false } = defaultTestOptions) => {\n    let id = 0;\n    let pass = true;\n    let executionTime = 0;\n    const assertions = [];\n    const collect = item => assertions.push(item);\n    const testRoutine = (async function () {\n        try {\n            const start = Date.now();\n            const result = await spec(assert(collect, offset));\n            executionTime = Date.now() - start;\n            return result;\n        }\n        catch (e) {\n            // todo bailout\n            console.log(e);\n        }\n    })();\n    return Object.defineProperties({\n        [Symbol.asyncIterator]: async function* () {\n            yield startTestMessage({ description }, offset);\n            await testRoutine;\n            for (const assertion of assertions) {\n                assertion.id = ++id;\n                if (assertion[Symbol.asyncIterator]) {\n                    // Sub test\n                    yield* assertion;\n                    // yield endTestMessage(assertion, offset); // todo merge end test and plan and replace this one by an assertion\n                }\n                yield assertionMessage(assertion, offset);\n                pass = pass && assertion.pass;\n            }\n            yield endTestMessage(this, offset);\n        }\n    }, {\n        routine: {\n            value: testRoutine\n        },\n        description: {\n            value: description\n        },\n        pass: {\n            get() {\n                return pass;\n            }\n        },\n        executionTime: {\n            get() {\n                return executionTime;\n            }\n        },\n        length: {\n            get() {\n                return id;\n            }\n        }\n    });\n};\n","import { isAssertionResult } from './assertion';\nconst print = (message, offset = 0) => {\n    console.log(message.padStart(message.length + (offset * 4))); // 4 white space used as indent (see tap-parser)\n};\nconst printYAML = (obj, offset = 0) => {\n    const YAMLOffset = offset + 0.5;\n    print('---', YAMLOffset);\n    for (const [prop, value] of Object.entries(obj)) {\n        print(`${prop}: ${JSON.stringify(value)}`, YAMLOffset);\n    }\n    print('...', YAMLOffset);\n};\nconst printComment = (message) => {\n    print(`# ${message.data}`, message.offset);\n};\nconst printTitle = (message) => {\n    const { data } = message;\n    print(`# ${data.description}`, message.offset);\n};\nconst printAssert = (message) => {\n    const { data, offset } = message;\n    const { pass, description, id } = data;\n    const label = pass === true ? 'ok' : 'not ok';\n    if (isAssertionResult(data)) {\n        print(`${label} ${id} - ${description}`, offset);\n        if (pass === false) {\n            const { expected, actual, at, operator } = data;\n            printYAML({ expected, actual, at, operator }, offset);\n        }\n    }\n    else {\n        print(`${pass ? 'ok' : 'not ok'} ${id} - ${description} # ${data.executionTime}ms`, message.offset);\n    }\n};\nconst printTest = (message) => {\n    const { length } = message.data;\n    print(`1..${length}`, message.offset);\n};\n// const printPlan = (message: PlanSummaryMessage): void => {\n//     const {data, offset} = message;\n//     print(`1..${data}`, offset);\n// };\nexport const tap = (message) => {\n    switch (message.type) {\n        case \"TEST_START\" /* TEST_START */:\n            printTitle(message);\n            break;\n        case \"ASSERTION\" /* ASSERTION */:\n            printAssert(message);\n            break;\n        case \"TEST_END\" /* TEST_END */:\n            printTest(message);\n            break;\n        case \"COMMENT\" /* COMMENT */:\n            printComment(message);\n            break;\n    }\n};\nexport const reporter = async (stream) => {\n    print('TAP version 13');\n    for await (const message of stream) {\n        tap(message);\n    }\n    // summary\n};\n","// with two arguments\nconst curry = (fn) => (a, b) => b === void 0 ? b => fn(a, b) : fn(a, b);\nconst toCurriedIterable = gen => curry((a, b) => ({\n    [Symbol.asyncIterator]() {\n        return gen(a, b);\n    }\n}));\nconst toIterable = gen => (...args) => ({\n    [Symbol.asyncIterator]() {\n        return gen(...args);\n    }\n});\n\nconst map = toCurriedIterable(async function* (fn, asyncIterable) {\n    let index = 0;\n    for await (const i of asyncIterable) {\n        yield fn(i, index, asyncIterable);\n        index++;\n    }\n});\n\nconst filter = toCurriedIterable(async function* (fn, asyncIterable) {\n    let index = 0;\n    for await (const i of asyncIterable) {\n        if (fn(i, index, asyncIterable) === true) {\n            yield i;\n        }\n        index++;\n    }\n});\n\nconst take = toCurriedIterable(async function* (number, asyncIterable) {\n    let count = 1;\n    for await (const i of asyncIterable) {\n        if (number !== undefined && count > number) {\n            break;\n        }\n        yield i;\n        count++;\n    }\n});\n\nconst skip = toCurriedIterable(async function* (limit, asyncIterable) {\n    let count = 0;\n    for await (const i of asyncIterable) {\n        if (count < limit) {\n            count++;\n            continue;\n        }\n        yield i;\n    }\n});\n\nconst flatMap = toCurriedIterable(async function* (fn, asyncIterable) {\n    for await (const i of asyncIterable) {\n        if (i[Symbol.asyncIterator]) {\n            yield* map(fn, i);\n        } else {\n            yield fn(i);\n        }\n    }\n});\n\nconst acutalSlice = toIterable(async function* (s, e, iterable) {\n    const toSkip = skip(s);\n    const toTake = take(e !== void 0 ? e - s : e);\n    for await (const i of toTake(toSkip(iterable))) {\n        yield i;\n    }\n});\nconst slice = (start, end, asyncIterable) => {\n    let s = start || 0;\n    let e = end;\n    let iterable = asyncIterable;\n    if (start && start[Symbol.asyncIterator] !== void 0) {\n        iterable = start;\n        s = 0;\n        e = void 0;\n    } else if (end && end[Symbol.asyncIterator] !== void 0) {\n        iterable = end;\n        s = start;\n        e = void 0;\n    } else if (asyncIterable === void 0) {\n        return iterable => acutalSlice(s, e, iterable);\n    }\n    return acutalSlice(s, e, iterable);\n};\n\nconst concat = toIterable(async function* (...values) {\n    for (const i of values) {\n        if (i[Symbol.asyncIterator]) {\n            yield* i;\n        } else {\n            yield i;\n        }\n    }\n});\n\nconst actualReduce = async (fn, initialValue, asyncIterable) => {\n    let index = -1;\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    const next = async () => {\n        index++;\n        return iterator.next();\n    };\n    let acc = initialValue;\n\n    if (initialValue === void 0) {\n        acc = (await next()).value;\n    }\n\n    while (true) {\n        const {value, done} = await next();\n        if (done === true) {\n            return acc;\n        }\n        acc = fn(acc, value, index, asyncIterable);\n    }\n};\nconst reduce = (fn, initVal, asyncIterable) => {\n    let acc = initVal;\n    let iterable = asyncIterable;\n\n    if (initVal && initVal[Symbol.asyncIterator] !== void 0) {\n        iterable = initVal;\n        acc = void 0;\n    }\n\n    if (iterable === void 0) {\n        return iterable => actualReduce(fn, acc, iterable);\n    }\n\n    return actualReduce(fn, acc, iterable);\n};\n\nconst findTuple = async (fn, asyncIterable) => {\n    let index = 0;\n    for await (const i of asyncIterable) {\n        if (fn(i, index, asyncIterable)) {\n            return {value: i, index: index};\n        }\n        index++;\n    }\n    return {value: void 0, index: -1};\n};\n\nconst find = curry(async (fn, asyncIterable) => (await findTuple(fn, asyncIterable)).value);\n\nconst findIndex = curry(async (fn, asyncIterable) => (await findTuple(fn, asyncIterable)).index);\n\nconst actualIncludes = async (item, from, iterable) => {\n    const strictEqualToItem = findIndex(x => x === item);\n    return (await strictEqualToItem(skip(from, iterable))) > -1;\n};\nconst includes = (item, from, asyncIterable) => {\n    let start = from;\n    let iterable = asyncIterable;\n\n    if (from && from[Symbol.asyncIterator] !== void 0) {\n        start = 0;\n        iterable = from;\n    }\n\n    if (iterable === void 0) {\n        return iterable => actualIncludes(item, start, iterable);\n    }\n\n    return actualIncludes(item, start, iterable);\n};\n\nconst every = curry(async (fn, asyncIterable) => {\n    let index = 0;\n    for await(const i of asyncIterable) {\n        if (!fn(i, index, asyncIterable)) {\n            return false;\n        }\n        index++;\n    }\n    return true;\n});\n\nconst some = curry(async (fn, asyncIterable) => {\n    let index = 0;\n    for await(const i of asyncIterable) {\n        if (fn(i, index, asyncIterable)) {\n            return true;\n        }\n        index++;\n    }\n    return false;\n});\n\n/*\n  The iterable won't always be consumed with a for await statement (which implicitly convert an iterable into a asyncIterable) so we need to explicitly make it async iterable\n  for await (const t of [1,2,3,4,5]){\n    //no problem\n  }\n\n  but\n\n  const iterator = [1,2,3][Symbol.asyncIterator]();\n  //problem\n */\nconst toAsync = toIterable(async function* (iterable) {\n    yield* iterable;\n});\n\nconst proto = {\n    [Symbol.asyncIterator]() {\n        return this._source[Symbol.asyncIterator]();\n    },\n    map(fn) {\n        return stream(map(fn, this));\n    },\n    filter(fn) {\n        return stream(filter(fn, this));\n    },\n    flatMap(fn) {\n        return stream(flatMap(fn, this));\n    },\n    slice(start = 0, end = void 0) {\n        return stream(slice(start, end, this));\n    },\n    concat(...values) {\n        return stream(concat(this, ...values));\n    },\n    reduce(fn, initialValue) {\n        return reduce(fn, initialValue, this);\n    },\n    find(fn) {\n        return find(fn, this);\n    },\n    findIndex(fn) {\n        return findIndex(fn, this);\n    },\n    includes(item, from = 0) {\n        return includes(item, from, this);\n    },\n    every(fn) {\n        return every(fn, this);\n    },\n    some(fn) {\n        return some(fn, this);\n    }\n};\n\nconst stream = iterable => {\n    const source = !iterable[Symbol.asyncIterator] ? toAsync(iterable) : iterable; // we make a difference as any wrap of iterable has performance impact (for the moment)\n    return Object.create(proto, {_source: {value: source}});\n};\n\nexport { stream, toAsync as from, map, filter, take, skip, flatMap, slice, concat, reduce, find, findIndex, includes, every, some };\n","import { defaultTestOptions, tester } from './test';\nimport { reporter as tap } from './tap-reporter';\nimport { filter } from '@lorenzofox3/for-await';\nexport * from './assertion';\nlet autoStart = true;\nasync function* flatten(iterable) {\n    for (const iter of iterable) {\n        yield* iter;\n    }\n}\nconst harnessFactory = (reporter = tap) => {\n    const tests = [];\n    const test = (description, specFn, opts = defaultTestOptions) => {\n        tests.push(tester(description, specFn, opts));\n    };\n    return {\n        test,\n        run: async () => {\n            //todo print plan\n            return reporter(filter((message) => message.type !== \"TEST_END\" /* TEST_END */ || message.offset > 0, flatten(tests)));\n        }\n    };\n};\nconst defaultTestHarness = harnessFactory();\nexport const test = defaultTestHarness.test;\nexport const createHarness = (reporter = tap) => {\n    autoStart = false;\n    return harnessFactory(reporter);\n};\nconst start = () => {\n    if (autoStart) {\n        defaultTestHarness.run();\n    }\n};\n// on next tick start reporting\n// @ts-ignore\nif (typeof window === 'undefined') {\n    setTimeout(start, 0);\n}\nelse {\n    // @ts-ignore\n    window.addEventListener('load', start);\n}\n","import { test } from './index';\nconst wait = (time = 500) => new Promise(resolve => {\n    setTimeout(() => resolve(), time);\n});\ntest('another one', async (t) => {\n    // console.time('another one');\n    await wait(1000);\n    t.ok('foo', 'foo is truthy');\n    // console.timeEnd('another one');\n});\ntest('a simple tester', async (t) => {\n    // console.time('a simple tester');\n    t.is(3, 2, 'should fail');\n    await wait(700);\n    await t.test('inside', async (t) => {\n        // console.time('inside');\n        await wait(800);\n        t.is('insider', 'insidrer', 'from insider');\n        // console.timeEnd('inside');\n    });\n    t.test('inside not waiting', async (t) => {\n        // console.time('inside not waiting');\n        t.test('deep inside not waiting', async (t) => {\n            // console.time('deep inside not waiting');\n            await wait(400);\n            t.is('bar', 'bar', 'bar');\n            // console.timeEnd('deep inside not waiting');\n        });\n        await t.test('deep inside', async (t) => {\n            // console.time('deep inside');\n            await wait(200);\n            t.is('foo', 'foo', 'deep inside assert');\n            // console.timeEnd('deep inside');\n        });\n        // console.timeEnd('inside not waiting');\n    });\n    t.is(4, 4, 'four should be four bis');\n    // console.timeEnd('a simple tester');\n});\n"],"names":["reporter","tap"],"mappings":"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"}